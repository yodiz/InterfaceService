{"name":"Interfaceservice","tagline":"An example of how you could host an interface as an service as well as access the host from a client.","body":"InterfaceService\r\n================\r\n\r\nAn example of how you could host an interface as an service as well as access the host from a client.\r\n\r\nExample of hosting an interface in a .net web project:\r\n\r\nIn Global.asax:\r\n\r\n    public class Global : System.Web.HttpApplication\r\n    {\r\n        protected void Application_Start(object sender, EventArgs e)\r\n        {\r\n            RouteTable.Routes.Add(new Http.InterfaceRoute<IInterface>(\"test/{func}/\", () => new Impl()));\r\n        }\r\n    }\r\n* IInterface is the interface to host\r\n* \"test/{func}/\" is the url where it is hosted\r\n* new Impl() is a instance implementing the interface\r\n\r\n\r\nExample of consuming the service on a client:\r\n\r\n\tvar client = new InterfaceService.Http.HttpInterface<IInterface>(\"http://localhost:10082/test/\").Client;\r\n\tvar result = client.MethodName(\"parameters\");\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}